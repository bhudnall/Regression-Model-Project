# R with rexp(n, lambda) --> lambda is the rate parameter
# and must be set to 0.2 for all of the simulations.
# mean and  stdev of exponential distribution is 1/lambda
# need to do a thousand simulations, will then invenstigate
# the sample
n <- 1000
lambda <- 0.2
n_sample <- 40
## sample_sim should be right - from the discussion forum:
## you should be doing 1000 x rexp(40,??).
set.seed(1)
simulation <- rexp(n, rate = 0.2)
sample_sim <- NULL
for (i in 1:n) sample_sim = c(sample_sim, mean(rexp(n_sample, rate = 0.2)))
## Visualize the mean and var in a chart against the
## normal distribution
sample_sim <- as.data.frame(sample_sim)
colnames(sample_sim)[1] <- "mean_value"
sim_plot <- ggplot(data=sample_sim,
aes(sample_sim$mean_value)) +
geom_histogram(binwidth=.1
, colour="black"
, fill="white") +
geom_density(alpha=.3) +
xlab("means") +
geom_vline(aes(xintercept=mean(mean_value))
, color="blue"
, linetype="dashed"
, size=2) +
ggtitle("Sample distribution with mean") +
theme(plot.title=element_text(family="Calibri", size=20))
sim_plot
# First part:
#     1. Show the sample mean and compare it to the theoretical mean of the distribution.
#     2. Show how variable the sample is (via variance) and compare it to the theoretical
#        of the distribution.
#     3. Show that the distribution is approximately normal.
## 1. mean of exponential distribution is 1/lambda
theor_mean <- 1/lambda
actual_mean <- round(mean(sample_sim), 3)
## 2. show variance and compare it to the theoretical of the distribution
theor_var <- (1/lambda)^2/n_sample
actual_var <- var(sample_sim)
# 3. Show that the distribution is approximately normal.
# find a way to plot a histogram of the actually distribution
# of the 1000 mean values and then somehow overlay the
# distribution function for a normal distribution generated
# from the appropriate μ and σ values so that you can visually
# compare the two distributions.
sim_sample_plot <- ggplot(data=sample_sim,
aes(sample_sim$mean_value)) +
geom_histogram(aes(y=..density..)
, binwidth=.10
, colour="black"
, fill="white") +
geom_density(alpha=.3, fill="#FF6666") +
xlab("means") +
ggtitle("Sample distribution with guassian overlay") +
theme(plot.title=element_text(family="Calibri", size=20))
sim_sample_plot
simulation_frame <- as.data.frame(simulation)
colnames(simulation_frame)[1] <- "mean_value"
simulation_frame[2] <- "actual"
colnames(simulation_frame)[2] <- "sources"
sample_sim[2] <- "sample"
colnames(sample_sim)[2] <- "sources"
bind_set <- bind_rows(simulation_frame, sample_sim)
sim_means <- bind_set %>%
group_by(sources) %>%
summarise(m=mean(mean_value))
simulation_plot <- ggplot(data=bind_set,
aes(x=mean_value,
fill=sources)) +
geom_density(alpha=.3) +
geom_vline(data=sim_means,
aes(xintercept=m, colour=sources),
linetype="dashed",
size=1) +
ggtitle("Compaing sample and actual distribution with means") +
theme(plot.title=element_text(family="Calibri", size=20))
simulation_plot
class(sample_sim)
theor_mean <- 1/lambda
actual_mean <- round(mean(sample_sim), 3)
require(ggplot2)
require(dplyr)
# exponential distribution in R can be simulated in
# R with rexp(n, lambda) --> lambda is the rate parameter
# and must be set to 0.2 for all of the simulations.
# mean and  stdev of exponential distribution is 1/lambda
# need to do a thousand simulations, will then invenstigate
# the sample
n <- 1000
lambda <- 0.2
n_sample <- 40
## sample_sim should be right - from the discussion forum:
## you should be doing 1000 x rexp(40,??).
set.seed(1)
simulation <- rexp(n, rate = 0.2)
sample_sim <- NULL
for (i in 1:n) sample_sim = c(sample_sim, mean(rexp(n_sample, rate = 0.2)))
## Visualize the mean and var in a chart against the
## normal distribution
sample_sim <- as.data.frame(sample_sim)
colnames(sample_sim)[1] <- "mean_value"
sim_plot <- ggplot(data=sample_sim,
aes(sample_sim$mean_value)) +
geom_histogram(binwidth=.1
, colour="black"
, fill="white") +
geom_density(alpha=.3) +
xlab("means") +
geom_vline(aes(xintercept=mean(mean_value))
, color="blue"
, linetype="dashed"
, size=2) +
ggtitle("Sample distribution with mean") +
theme(plot.title=element_text(family="Calibri", size=20))
sim_plot
# First part:
#     1. Show the sample mean and compare it to the theoretical mean of the distribution.
#     2. Show how variable the sample is (via variance) and compare it to the theoretical
#        of the distribution.
#     3. Show that the distribution is approximately normal.
## 1. mean of exponential distribution is 1/lambda
theor_mean <- 1/lambda
actual_mean <- round(mean(sample_sim), 3)
sample_sim
theor_mean <- 1/lambda
actual_mean <- round(mean(sample_sim$mean_value), 3)
theor_mean <- 1/lambda
theor_mean
actual_mean <- round(mean(sample_sim$mean_value), 3)
actual_mean
?dnorm
?stat_function
dat <- data.frame(x = c(rnorm(100),rnorm(100,2,0.5)),
a = rep(letters[1:2],each = 100))
dat
?scale
?qnorm
View(sample_sim)
require(ggplot2)
require(dplyr)
# For the second part of the project, to load the data just
# type ToothGrowth hist(runif(1000))
# 1. Load the ToothGrowth data and perform some basic exploratory data analyses
# 2. Provide a basic summary of the data.
# 3. Use confidence intervals and/or hypothesis tests to compare tooth growth by supp and dose.
#    (Only use the techniques from class, even if there's other approaches worth considering)
# 4. State your conclusions and the assumptions needed for your conclusions.
summary(ToothGrowth)
glimpse(ToothGrowth)
View(ToothGrowth)
?facet_grid
?ToothGrowth
?facet_grid
boxplots_tg <- ggplot(data=ToothGrowth) +
geom_boxplot(aes(x=dose, y=len)) +
facet_grid(. ~ supp)
boxplot_tg
boxplots_tg <- ggplot(data=ToothGrowth) +
geom_boxplot(aes(x=dose, y=len)) +
facet_grid(. ~ supp)
boxplots_tg
summary_of_dose <- ToothGrowth %>%
group_by(supp, dose) %>%
summarise(means = mean(len))
summary_of_dose
?boxplot
boxplots_tg <- ggplot(data=ToothGrowth) +
geom_boxplot(aes(x=dose, y=len, subset=len)) +
facet_grid(. ~ supp)
boxplots_tg
?boxplot
boxplots_tg <- ggplot(data=ToothGrowth) +
geom_boxplot(aes(x=dose, y=len), fill=len) +
facet_grid(. ~ supp)
boxplots_tg
boxplots_tg <- ggplot(data=ToothGrowth, aes(factor(len), fill=len, dose)) +
geom_boxplot() +
facet_grid(. ~ supp)
boxplots_tg
boxplots_tg <- ggplot(data=ToothGrowth, aes(x=len, y=len, fill=len)) +
geom_boxplot() +
facet_grid(. ~ supp)
boxplots_tg
boxplots_tg <- ggplot(data=ToothGrowth, aes(x=dose, y=len, fill=len)) +
geom_boxplot() +
facet_grid(. ~ supp)
boxplots_tg
boxplots_tg <- ggplot(data=ToothGrowth, aes(x=dose, y=len, fill=dose)) +
geom_boxplot() +
facet_grid(. ~ supp)
boxplots_tg
boxplots_tg <- ggplot(data=ToothGrowth, aes(factor(dose), len)) +
geom_boxplot(aes(fill=dose)) +
facet_grid(. ~ supp)
boxplots_tg
boxplots_tg <- ggplot(data=ToothGrowth, aes(dose=factor(dose), len)) +
geom_boxplot(aes(fill=dose)) +
facet_grid(. ~ supp)
boxplots_tg
boxplots_tg <- ggplot(data=ToothGrowth, aes(factor(dose), len)) +
geom_boxplot(aes(fill=dose)) +
facet_grid(. ~ supp)
boxplots_tg
boxplots_tg <- ggplot(data=ToothGrowth, aes("dose"=factor(dose), len)) +
geom_boxplot(aes(fill=dose)) +
facet_grid(. ~ supp)
boxplots_tg
boxplots_tg <- ggplot(data=ToothGrowth, aes(factor(dose), len)) +
geom_boxplot(aes(fill=dose)) +
xlab("Dose") +
facet_grid(. ~ supp)
boxplots_tg
summary_of_dose <- ToothGrowth %>%
group_by(supp, dose) %>%
summarise(means = mean(len))
summary_of_dose
?ToothGrowth
boxplots_tg <- ggplot(data=ToothGrowth, aes(factor(dose), len)) +
geom_boxplot(aes(fill=dose)) +
xlab("Dose") +
ylab("Numeric Tooth Length") +
facet_grid(. ~ supp)
boxplots_tg
?ToothGrowth
boxplots_tg <- ggplot(data=ToothGrowth, aes(factor(dose), len)) +
geom_boxplot(aes(fill=dose)) +
xlab("Dose (Miligrams)") +
ylab("Numeric Tooth Length") +
facet_grid(. ~ supp) +
ggtitle("Tooth Length boxes by Dose and Supplment Type") +
theme(plot.title=element_text(family="Calibri", size=20))
boxplots_tg
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose == 1, ])
robust_logit_model <- rlm(len ~ dose + supp, data=ToothGrowth)
summary(robust_logit_model)
require(MASS)
robust_logit_model <- rlm(len ~ dose + supp, data=ToothGrowth)
summary(robust_logit_model)
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose, ])
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose == 1, ])
linear_model <- lm(len ~ dose + supp, data=ToothGrowth)
summary(linear_model)
t.test(len ~ supp, ToothGrowth[ToothGrowth$dose == 0.5, ])
?ToothGrowth
?ToothGrowth
summary(ToothGrowth)
glimpse(ToothGrowth)
View(ToothGrowth)
var(ToothGrowth[ToothGrowth$dose == 2, ToothGrowth$supp == OJ])
var(ToothGrowth[ToothGrowth$dose == 2, ToothGrowth$supp == "OJ"])
var(ToothGrowth[ToothGrowth$dose == 2, ])
?t.test
?ToothGrowth
mtcars
mpg <- mtcars$mpg
mpg
mean_mpg <- mean(mpg)
mean_mpg
sd_mpg <- sd(mpg)
sd_mpg
?qnorm
summary(mpg)
qnorm(.05)
summary(qnorm(0.5))
mpg <- mtcars$mpg
mean_mpg <- mean(mpg)
sd_mpg <- sd(mpg)
z <- qnorm(.05)
mu0 <- mean_mpg - z * sd_mpg / sqrt(nrow(mtcars))
mu0
?t.test
mtcars
cyl_4 <- mtcars[mtcars$cyl == 4, c("mpg", "cyl")]
cyl_4
cyl_4 <- mtcars[mtcars$cyl == 4, "mpg"]
cyl_4
cyl_6 <- mtcars[mtcars$cyl == 6, "mpg"]
results <- t.test(x=cyl_4
, y=cyl_6
, alternativ="two.sided"
, var.equal = TRUE)
results
0.001287 * 100
results <- t.test(x=cyl_4
, y=cyl_6
, alternativ="two.sided"
, var.equal = TRUE)$p.value
results
?confint
3.0-1.1
3.0*.95
3.0*0.975
first <- c(140, 138, 150, 148, 135)
first
second <- c(132, 135, 151, 146, 130)
second
?t.test
results <- t.test(x=first
, y=second
, alternative="two.sided"
, paired = TRUE)
results
result <- (3 - 100)
result <- result / (1.1 / sqrt(100))
results
rm(result)
result <- (3 - 100)
result <- result / (1.1 / sqrt(100))
result
?confint
result_mean <- 3
result_sd <- 1.1
result_se <- 1.1/sqrt(100)
result_se
3 - 0.11
1.1*.975
1.1/sqrt(100)
n <- 100
s <- 1.1
mn <- 3
mn + c(-1, 1) * qt(.975, 8) * s / sqrt(n)
mn <- 1100
s <- 30
mn + c(-1, 1) * qt(.975, 99) * s / sqrt(n)
mn <- 1100
n <- 100
s <- 1.1
mn <- 3
mn + c(-1, 1) * qt(.975, n - 1) * s / sqrt(n)
mn <- 1100
s <- 30
n <- 9
mn + c(-1, 1) * qt(.975, n - 1) * s / sqrt(n)
ans <- round(pbinom(3, prob = .5, size = 4, lower.tail = FALSE), 4)
ANS
ans
ans * 100
n <- (qnorm(.95) + qnorm(.9))^2 * .4^2/.1^2
n
n <- (qnorm(.95) + qnorm(.9))^2 *.4^2/.1^2
power.t.test(n = 100, delta=0, sd=0.4, type="one.sample", alt="one.sided")$power
pv <- ppois(100 - 1, lambda = 1787 * 10, lower.tail = FALSE)
PV
pv
pv <- ppois(100 - 1, lambda = 1787 * 10, lower.tail = TRUE)
pv
power.t.test(n = 100, delta=01, sd=0.4, type="one.sample", alt="one.sided")$power
power.t.test(n = 100, delta=.01, sd=0.4, type="one.sample", alt="one.sided")$power
power.t.test(n = 100, delta=.01, sd=0.4, type="one.sample", alt="one.sided")$power * 100
100*.05
1787 * 100
1787 / 100
1/10
.01 * 100
1787*.01
ppois(9, 17.87, lower.tail = FALE)
ppois(9, 17.87, lower.tail = FALSE)
ppois(9, 17.87, lower.tail = TRUE)
ppois(17.87, 9, lower.tail = TRUE)
ppois(17.87, 9, lower.tail = flase)
ppois(17.87, 9, lower.tail = FALSE)
ppois(17.87, 9, lower.tail = FALSE) * 100
?ttest
?t.test
ans <- round(pbinom(2, prob = .5, size = 4, lower.tail = FALSE), 4)
ans
1/100
1787*.01
pv <- ppois(9, 17.87, lower.tail = TRUE)
pv
pv <- ppois(9, 17.87, lower.tail = FALSE)
PV
pv
pv - 1
.05 * 100
.01 * 1787
pv <- ppois(9, 18, lower.tail = FALSE)
pv
?ppois
pv <- ppois(9, 17.87, lower.tail = TRUE)
PV
pv
.01 * 1787
pv <- ppois(9, 17.87, lower.tail = TRUE)
pv
sp <- sqrt((8 * 1.5^2 + 8 * 1.8^2)/(9 + 9 - 2))
-3 - 1 + c(-1, 1) * qt(.975, 16) * sp * (1/9 + 1/9) ^ 0.5
sp <- sqrt((8 * 1.5^2 + 8 * 1.8^2)/(9 + 9 - 2))
-3 - 1 + c(-1, 1) * qt(.975, 16) * sp * (1/9 + 1/9)^.5
-3 - 1
1 + 3
1 - -3
ap
sp
mixprob <- (9 - 1) / (9 + 9 - 2)
s <- sqrt(mixprob * 1.5^2 + (1 - mixprob) * 1.8^2)
s
sp
z <- (-3 - 1)/(s * sqrt(1/9 + 1/9))
z
pz <- 2 * pnorm(-abs(z))
pz
swirl()
library(swirl)
install_from_swirl("Regression Models")
swirl()
installed.packages("UsingR")
w <- c(2, 1, 3, 1)
mean(w)
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
galton <- cbind(x, y)
galton
lm(formula = I(x - mean(x)) ~ I(y - mean(y)) - 1, data = galton)
class(galton)
galton <- as.data.frame(galton)
lm(formula = I(x - mean(x)) ~ I(y - mean(y)) - 1, data = galton)
lm(formula = I(y - mean(y)) ~ I(x - mean(x)) - 1, data = galton)
?lm
mtcars
lm(mtcars$mpg ~ mtcars$weight, data=mtcars)
lm(mpg ~ weight, data=mtcars)
lm(mpg ~ wt, data=mtcars)
z <- (x - mean(x))/sd(x)
z
z
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
z <- (x[1] - mean(x))/sd(x)
z
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
galton <- cbind(x, y)
galton <- as.data.frame(galton)
lm(formula = I(y - mean(y)) ~ I(x - mean(x)) - 1, data = galton)
lm(y ~ x, data=galton)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
0.4 * 1.5
x <- c(0.18, -1.54, 0.42, 0.95)
mean(x)
w <- c(2, 1, 3, 1)
mean(w)
y <- c(0.18, 0.18 -1.54, 0.42, 0.42, 0.42, 0.95)
mean(y)
y <- c(0.18, 0.18 -1.54, 0.42, 0.42, 0.42, 0.95)
mean(y)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
y <- c(0.18, 0.18 -1.54, 0.42, 0.42, 0.42, 0.95)
z <- rep(x, w)
mean(y)
mean(z)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
galton <- cbind(x, y)
galton <- as.data.frame(galton)
lm(formula = I(y - mean(y)) ~ I(x - mean(x)) - 1, data = galton)
assets: ../../assets
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
galton <- cbind(x, y)
galton <- as.data.frame(galton)
lm(formula = I(y - mean(y)) ~ I(x - mean(x)) + 0, data = galton)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
galton <- cbind(x, y)
galton <- as.data.frame(galton)
lm(formula = I(y - mean(y)) ~ I(x - mean(x)) - 1, data = galton)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
galton <- cbind(x, y)
galton <- as.data.frame(galton)
lm(y ~ x - 1, data = galton)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
galton <- cbind(x, y)
galton <- as.data.frame(galton)
lm(y ~ x + 1, data = galton)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
galton <- cbind(x, y)
galton <- as.data.frame(galton)
lm(y ~ x + 0, data = galton)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
galton <- cbind(x, y)
galton <- as.data.frame(galton)
lm(y ~ x - 1, data = galton)
require(rmarkdown)
getwd()
setwd("/Users/brianhudnall.programming/r/regression-model-project")
setwd("/Users/brianhudnall/programming/r/regression-model-project")
getwd()
render("RegModProject.rmd", "pdf_document")
pandoc("RegModProject.rmd", format = "latex", ext - "pdf")
pandoc("RegModProject.rmd", format = "latex", ext = "pdf")
require(pandoc)
pandoc("RegModProject.rmd", format = "latex", ext = "pdf")
?highlight
pandoc("RegModProject.md", format = "latex")
install.packages("highlight")
?highlight
require(highlight)
?highlight
